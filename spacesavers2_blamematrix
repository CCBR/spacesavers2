#!/usr/bin/env python3
import sys
import os
import gzip
import textwrap
import time

from src.VersionCheck import version_check
from src.VersionCheck import __version__

version_check()

# from src.FileDetails import FileDetails
from src.dfUnit import fgzblamer

# from src.Summary import Summary
from src.utils import *
from datetime import date

import argparse


def main():
    start = time.time()
    scriptname = os.path.basename(__file__)
    elog = textwrap.dedent(
        """\
    Version:
        {}
    Example:
        > spacesavers2_blamematrix -f /output/from/spacesavers2_mimeo/prefix.allusers.mimeo.files.gz -d 3 -o prefix.blamematrix.tsv
        """.format(
            __version__
        )
    )
    parser = argparse.ArgumentParser(
        description="spacesavers2_blamematrix: get per user duplicate sizes at a given folder level  (default 3)",
        epilog=elog,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "-f",
        "--filesgz",
        dest="filesgz",
        required=True,
        type=str,
        default=sys.stdin,
        help="spacesavers2_mimeo prefix.allusers.mimeo.files.gz file",
    )
    parser.add_argument(
        "-l",
        "--level",
        dest="level",
        required=False,
        type=int,
        default=3,
        help="folder level to use for creating matrix",
    )
    parser.add_argument(
        "-r",
        "--humanreable",
        dest="humanreable",
        required=False,
        action=argparse.BooleanOptionalAction,
        help="sizes are printed in human readable format ... (default: Bytes)",
    )
    parser.add_argument(
        "-z",
        "--includezeros",
        dest="includezeros",
        required=False,
        action=argparse.BooleanOptionalAction,
        help="include folders where totalbytes is zero.",
    )
    parser.add_argument(
        "-o",
        "--outfile",
        dest="outfile",
        required=False,
        type=str,
        help="output tab-delimited file (default STDOUT)",
    )
    parser.add_argument("-v", "--version", action="version", version=__version__)

    print_with_timestamp(
        start=start, scriptname=scriptname, string="version: {}".format(__version__)
    )

    global args
    args = parser.parse_args()

    blamematrix = dict()
    blamematrix["allusers"] = dict()
    with gzip.open(os.path.join(args.filesgz), "rt") as filesgz:
        for l in filesgz:
            dfu = fgzblamer()
            properly_set = dfu.set(l, args.level)
            if not properly_set:
                continue
            for user in dfu.users:
                if not user in blamematrix:
                    blamematrix[user] = dict()
                for folder in dfu.bm[user]:
                    if not folder in blamematrix[user]:
                        blamematrix[user][folder] = 0
                    if not folder in blamematrix["allusers"]:
                        blamematrix["allusers"][folder] = 0
                    blamematrix[user][folder] += dfu.bm[user][folder]
                    blamematrix["allusers"][folder] += dfu.bm[user][folder]

    if args.outfile:
        of = open(args.outfile, "w")
    else:
        of = sys.stdout

    users = list(blamematrix.keys())
    folders = list(blamematrix["allusers"].keys())
    users2 = ["folder"]
    users2.extend(users)
    outstr = "\t".join(users2)
    of.write("%s\n"%(outstr))
    for folder in folders:
        outlist = []
        outlist.append(str(folder))
        for user in users:
            try:
                hrsize = blamematrix[user][folder]
                if args.humanreable:
                    hrsize = get_human_readable_size(hrsize)
            except KeyError:
                hrsize = "0"
            outlist.append(str(hrsize))
        if blamematrix["allusers"][folder] == 0 :
            if args.includezeros: 
                of.write("%s\n"%("\t".join(outlist)))
        else:
            of.write("%s\n"%("\t".join(outlist)))
    if args.outfile: of.close()
    print_with_timestamp(start=start, scriptname=scriptname, string="Done!")


if __name__ == "__main__":
    main()
