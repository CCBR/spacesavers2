#!/usr/bin/env python3
import sys
import os
import textwrap
import time
from pathlib import Path
import uuid

from src.VersionCheck import version_check
from src.VersionCheck import __version__

version_check()

# from src.FileDetails import FileDetails
from src.dfUnit import fgzblamer

# from src.Summary import Summary
from src.utils import *
from datetime import date

import argparse


def main():
    start = time.time()
    scriptname = os.path.basename(__file__)
    elog = textwrap.dedent(
        """\
    Version:
        {}
    Example:
        > spacesavers2_usurp -g grubbers.TSV -h someHash
        """.format(
            __version__
        )
    )
    parser = argparse.ArgumentParser(
        description="spacesavers2_usurp: delete all but one copy of the file matching the hash and replace all other copies with hardlinks",
        epilog=elog,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "-g",
        "--grubber",
        dest="grubber",
        required=True,
        type=str,
        default=sys.stdin,
        help="spacesavers2_grubbers output TSV file",
    )
    parser.add_argument(
        "-x",
        "--hash",
        dest="hash",
        required=True,
        type=str,
        help="hash (or unique partial hash) from column 1 of spacesavers2_grubbers TSV file",
    )
    parser.add_argument(
        "-f",
        "--force",
        dest="force",
        required=False,
        action=argparse.BooleanOptionalAction,
        help="forcefully create symlink if hardlink is not possible",
    )
    parser.add_argument("-v", "--version", action="version", version=__version__)

    global args
    args = parser.parse_args()

    if args.version:
        version_print()

    print_with_timestamp(
        start=start, scriptname=scriptname, string="version: {}".format(__version__)
    )

    total_saved = 0
    with open(args.grubber, "rt") as grubbers:
        for l in grubbers:
            l = l.strip().split("\t")
            lhash = l[0]
            if args.hash in lhash:
                dupfiles = l[4].split(";")
                original_copy = Path(dupfiles.pop(0).strip('"'))
                print_with_timestamp(
                    start=start,
                    scriptname=scriptname,
                    string="Original copy: {}".format(original_copy),
                )
                for dup in dupfiles:
                    dup = Path(dup.strip('"'))
                    duptmp = Path(str(dup) + "." + str(uuid.uuid4()))
                    st = os.stat(dup)
                    total_saved += st.st_size
                    print_with_timestamp(
                        start=start,
                        scriptname=scriptname,
                        string="Deleting copy: {}".format(dup),
                    )
                    try:
                        os.link(original_copy, duptmp)
                        print_with_timestamp(
                            start=start,
                            scriptname=scriptname,
                            string="Creating hard link file: {}".format(dup),
                        )
                        os.remove(dup)
                        os.rename(duptmp, dup)
                    except OSError:
                        print_with_timestamp(
                            start=start,
                            scriptname=scriptname,
                            string="OSError occurred while creating hard-link. Probably trying to create a cross-device hard-link",
                        )
                        if args.force:
                            print_with_timestamp(
                                start=start,
                                scriptname=scriptname,
                                string="Creating sym-link instead!",
                            )
                            os.remove(dup)
                            os.symlink(original_copy, dup)
                break
    total_saved_human_readable = get_human_readable_size(total_saved)
    print_with_timestamp(
        start=start,
        scriptname=scriptname,
        string="Done! Saved: {}".format(total_saved_human_readable),
    )


if __name__ == "__main__":
    main()
